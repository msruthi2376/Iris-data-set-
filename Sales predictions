# Importing the required libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset (replace with your actual file name)
df = pd.read_csv("Sales_Data.csv")

# Display first few rows
print("First 5 rows of the dataset:")
print(df.head())

# Display dataset info
print("\nDataset Information:")
print(df.info())

# Summary statistics
print("\nStatistical Summary:")
print(df.describe())

# Check for missing values
print("\nMissing Values in Each Column:")
print(df.isnull().sum())

# Clean column names for easy use
df.columns = [col.strip().replace(" ", "_") for col in df.columns]

# Check if any categorical columns exist
print("\nCategorical Columns:")
print(df.select_dtypes(include='object').columns.tolist())

# Sales distribution
if 'Sales' in df.columns:
    plt.figure(figsize=(8,6))
    sns.histplot(df['Sales'], kde=True, color='blue')
    plt.title("Distribution of Sales")
    plt.xlabel("Sales Amount")
    plt.ylabel("Frequency")
    plt.show()

# Sales over time
if 'Date' in df.columns:
    df['Date'] = pd.to_datetime(df['Date'])
    df = df.sort_values('Date')
    plt.figure(figsize=(12,6))
    sns.lineplot(x='Date', y='Sales', data=df)
    plt.title("Sales Trend Over Time")
    plt.xlabel("Date")
    plt.ylabel("Sales")
    plt.show()

# Sales by region or store
if 'Region' in df.columns:
    region_sales = df.groupby('Region')['Sales'].sum().sort_values(ascending=False)
    plt.figure(figsize=(10,6))
    sns.barplot(x=region_sales.values, y=region_sales.index, palette='viridis')
    plt.title("Total Sales by Region")
    plt.xlabel("Total Sales")
    plt.ylabel("Region")
    plt.show()

# Sales by product
if 'Product' in df.columns:
    product_sales = df.groupby('Product')['Sales'].sum().sort_values(ascending=False).head(10)
    plt.figure(figsize=(10,6))
    sns.barplot(x=product_sales.values, y=product_sales.index, palette='magma')
    plt.title("Top 10 Products by Total Sales")
    plt.xlabel("Total Sales")
    plt.ylabel("Product")
    plt.show()

# Correlation heatmap
plt.figure(figsize=(8,6))
sns.heatmap(df.select_dtypes(include='number').corr(), annot=True, cmap='coolwarm')
plt.title("Correlation Heatmap")
plt.show()
